package com.fudz.restau;

import com.fudz.custom.FudzFrame;
import com.fudz.custom.FudzJList;
import com.fudz.custom.FudzToolbar;
import com.fudz.custom.GridListView;
import com.fudz.fragments.CookingFragment;
import com.fudz.fragments.OrdersFragment;
import com.fudz.fragments.Rdy2ServeFragment;
import com.google.gson.Gson;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 *
 * @author Fudz Restaurant
 */
public class WindowFrame extends FudzFrame {
    
    /* Ang laman ng mainOrdersLst variable
    * OrdersList: List<HashMap<String, Object>> {
        map_key = FudzJList.ITEM_NAME_KEY;
        map_key = FudzJList.ITEM_QTY_KEY;
    }
    * AddonsList: List<HashMap<String, Object>> {
        map_key = FudzJList.ITEM_NAME_KEY;
        map_key = FudzJList.ITEM_QTY_KEY;
    }
    * Bill: float data type;
    */
    public static List<HashMap<String, Object>> mainOrderLst = new ArrayList<>(); // main list of orders
    public static List<HashMap<String, Object>> cookingOrderLst = new ArrayList<>(); // list of all orders that are for cooking
    public static List<HashMap<String, Object>> ready2ServeLst = new ArrayList<>(); // list of all orders that are already done and are ready to serve.
    
    private Color menuLabelColor = new Color(183,138,0);
    
    private Database.Server DB;
    private final String mReference = "Sample"; // database reference
    
    public static int viewedScrn = Fudz.ORDERS_SCREEN;
    
    public static int ordersFragmentPanelWidth = 0;
    public static int ordersFragmentPanelHeight = 0;
    
    private FudzMouseListener fudzFrameMouseListener;
    private FudzToolbar.FudzToolbarMouseListener fudzToolbarMouseListener;
    
    public static boolean[] isResizingWindowOnDrag = {false, false};
    
    public static int columnPHolder = 0, pHolderCount = 0, columnNum = 0;

    /**
     * Creates new form NewJFrame
     */
    public WindowFrame() {
        //Firebase.initialize();
        //DB = new Database.Server(mReference);
        
        initComponents();
        /*
        * This will resize the window frame to the device's screen sizes - 300
        * and will center the frame.
        */
        int newScreenWidth = (int)(Fudz.getScreenWidth() - 300);
        float rate = ((float)Fudz.getScreenWidth() - 300) / (float)Fudz.getScreenWidth();
        int newScreenHeight = (int)(Fudz.getScreenHeight() * rate);
        
        this.setBounds(300/2, ((int)Fudz.getScreenHeight()-newScreenHeight)/2, newScreenWidth, newScreenHeight);
        
        _initListeners(); // initialize the listeners
        _populate();
        new UpdateFragmentsThread().start();
        // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        ordersPanel = new javax.swing.JPanel();
        orders_ic = new javax.swing.JLabel();
        cookingPanel = new javax.swing.JPanel();
        cooking_ic = new javax.swing.JLabel();
        ready2ServePanel = new javax.swing.JPanel();
        ready_ic = new javax.swing.JLabel();
        contentsScrollPane = new javax.swing.JScrollPane();
        contentPanel = new com.fudz.custom.GridListView();
        fudzToolbar = new com.fudz.custom.FudzToolbar(this);
        closeWindowBtn = new javax.swing.JLabel();
        maximizeBtn = new javax.swing.JLabel();
        minimizeBtn = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        headingLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fudz Restaurant");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(335, 0));
        setUndecorated(true);
        setSize(new java.awt.Dimension(938, 490));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeiconified(java.awt.event.WindowEvent evt) {
                formWindowDeiconified(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(252, 243, 236));
        mainPanel.setPreferredSize(new java.awt.Dimension(1351, 700));

        menuPanel.setBackground(new java.awt.Color(218, 164, 0));
        menuPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(251, 211, 87), java.awt.Color.lightGray));

        ordersPanel.setBackground(new java.awt.Color(252, 243, 236));
        ordersPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ordersPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ordersPanelMouseExited(evt);
            }
        });

        orders_ic.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orders_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/order_yellow_25px.png"))); // NOI18N
        orders_ic.setAlignmentX(0.5F);
        orders_ic.setIconTextGap(2);
        orders_ic.setMaximumSize(new java.awt.Dimension(30, 30));
        orders_ic.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout ordersPanelLayout = new javax.swing.GroupLayout(ordersPanel);
        ordersPanel.setLayout(ordersPanelLayout);
        ordersPanelLayout.setHorizontalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orders_ic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        ordersPanelLayout.setVerticalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(orders_ic, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        cookingPanel.setBackground(new java.awt.Color(218, 164, 0));
        cookingPanel.setPreferredSize(new java.awt.Dimension(232, 42));
        cookingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cookingPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cookingPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cookingPanelMouseExited(evt);
            }
        });

        cooking_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cooking_white_25px.png"))); // NOI18N

        javax.swing.GroupLayout cookingPanelLayout = new javax.swing.GroupLayout(cookingPanel);
        cookingPanel.setLayout(cookingPanelLayout);
        cookingPanelLayout.setHorizontalGroup(
            cookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cookingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cooking_ic)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cookingPanelLayout.setVerticalGroup(
            cookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cooking_ic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        );

        ready2ServePanel.setBackground(new java.awt.Color(218, 164, 0));
        ready2ServePanel.setPreferredSize(new java.awt.Dimension(232, 42));
        ready2ServePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ready2ServePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ready2ServePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ready2ServePanelMouseExited(evt);
            }
        });

        ready_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/waiter_white_25px.png"))); // NOI18N

        javax.swing.GroupLayout ready2ServePanelLayout = new javax.swing.GroupLayout(ready2ServePanel);
        ready2ServePanel.setLayout(ready2ServePanelLayout);
        ready2ServePanelLayout.setHorizontalGroup(
            ready2ServePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ready2ServePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ready_ic)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ready2ServePanelLayout.setVerticalGroup(
            ready2ServePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ready_ic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ready2ServePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
            .addComponent(cookingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(ordersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(cookingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ready2ServePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(367, Short.MAX_VALUE))
        );

        contentsScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        contentsScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        contentPanel.setBackground(new java.awt.Color(252, 243, 236));
        contentPanel.setLayout(new java.awt.GridLayout(3, 2, 10, 20));
        contentPanel.setOnContentChangedListener(new GridListView.ContentChangeListener() {
            @Override
            public void onContentChanged() {
                pHolderCount = 0; // always reset the place holder count when content changed.
                _updateScreen(viewedScrn);
            }
        });
        contentsScrollPane.setViewportView(contentPanel);

        fudzToolbar.setBackground(new java.awt.Color(218, 164, 0));

        closeWindowBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/close_window_25px.png"))); // NOI18N
        closeWindowBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeWindowBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeWindowBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeWindowBtnMouseExited(evt);
            }
        });

        maximizeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/full_screen_25px.png"))); // NOI18N
        maximizeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maximizeBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                maximizeBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                maximizeBtnMouseExited(evt);
            }
        });

        minimizeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minimize_window_25px.png"))); // NOI18N
        minimizeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeBtnMouseExited(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Californian FB", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logo25px.png"))); // NOI18N
        jLabel1.setText("Fudz Restaurant");

        javax.swing.GroupLayout fudzToolbarLayout = new javax.swing.GroupLayout(fudzToolbar);
        fudzToolbar.setLayout(fudzToolbarLayout);
        fudzToolbarLayout.setHorizontalGroup(
            fudzToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fudzToolbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(minimizeBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximizeBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeWindowBtn)
                .addGap(18, 18, 18))
        );
        fudzToolbarLayout.setVerticalGroup(
            fudzToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(closeWindowBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
            .addComponent(maximizeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(minimizeBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        headingLbl.setFont(new java.awt.Font("Californian FB", 1, 48)); // NOI18N
        headingLbl.setForeground(new java.awt.Color(183, 138, 0));
        headingLbl.setText("Customer Orders");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fudzToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(headingLbl))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(contentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(fudzToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(headingLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contentsScrollPane)
                        .addGap(23, 23, 23))
                    .addComponent(menuPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeWindowBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeWindowBtnMouseEntered
        if (!isResizingWindowOnDrag[1]) {
            closeWindowBtn.setIcon(new ImageIcon(getClass().getResource("/icons/close_filled_window_25px.png")));
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            return;
        }
    }//GEN-LAST:event_closeWindowBtnMouseEntered

    private void closeWindowBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeWindowBtnMouseExited
        closeWindowBtn.setIcon(new ImageIcon(getClass().getResource("/icons/close_window_25px.png")));
    }//GEN-LAST:event_closeWindowBtnMouseExited

    private void closeWindowBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeWindowBtnMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeWindowBtnMouseClicked

    private void maximizeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizeBtnMouseEntered
        if (!isResizingWindowOnDrag[1]) {
            maximizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/normal_window_25px.png")));
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            isResizingWindowOnDrag[1] = false;
            
            if (this.getExtendedState() != Fudz.WINDOW_MAXIMIZE) {
                maximizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/maximized_stretch_25px.png")));
                return;
            }
        }
    }//GEN-LAST:event_maximizeBtnMouseEntered

    private void maximizeBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizeBtnMouseExited
        maximizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/full_screen_25px.png")));
    }//GEN-LAST:event_maximizeBtnMouseExited

    private void maximizeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizeBtnMouseClicked
        pHolderCount = 0;
        if (this.getExtendedState() != Fudz.WINDOW_MAXIMIZE) {
            FudzFrame.maximizeFrame(this);
            
            maximizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/full_screen_25px.png")));
            
            /*
            * This will update the grid layout every maximize view in the background thread
            */
            new UpdateFragmentsThread().start();
            
            return;
        }
        
        lastWindowState = Fudz.WINDOW_NORMAL;
        this.setExtendedState(Fudz.WINDOW_NORMAL);
        maximizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/full_screen_25px.png")));
        new UpdateFragmentsThread().start();
    }//GEN-LAST:event_maximizeBtnMouseClicked

    private void minimizeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeBtnMouseEntered
        if (!isResizingWindowOnDrag[1]) {
            minimizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/minimize_filled_window_25px.png")));
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_minimizeBtnMouseEntered

    private void minimizeBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeBtnMouseExited
        minimizeBtn.setIcon(new ImageIcon(getClass().getResource("/icons/minimize_window_25px.png")));
    }//GEN-LAST:event_minimizeBtnMouseExited

    private void minimizeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeBtnMouseClicked
        this.setExtendedState(Fudz.WINDOW_MINIMIZE);
    }//GEN-LAST:event_minimizeBtnMouseClicked

    private void formWindowDeiconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeiconified
        if (lastWindowState == Fudz.WINDOW_MAXIMIZE)
            FudzFrame.maximizeFrame(this);
    }//GEN-LAST:event_formWindowDeiconified
    
    private void cookingPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cookingPanelMouseEntered
        if (isResizingWindowOnDrag[0])
            return;
        
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR)); // always set the cursor to default
        
        if (viewedScrn == Fudz.COOKING_SCREEN)
            return;
        
        cookingPanel.setBackground(Fudz.mouseEnteredOnMenuTabs_COLOR);
    }//GEN-LAST:event_cookingPanelMouseEntered

    private void cookingPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cookingPanelMouseExited
        if (viewedScrn == Fudz.COOKING_SCREEN)
            return;
        
        cookingPanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
    }//GEN-LAST:event_cookingPanelMouseExited

    private void cookingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cookingPanelMouseClicked
        pHolderCount = 0; // always reset the place holder count when changing screen
        if (viewedScrn == Fudz.COOKING_SCREEN)
            return;
        
        cookingPanel.setBackground(Fudz.mouseClickedOnMenuTabs_COLOR);
        viewedScrn = Fudz.COOKING_SCREEN; // set the viewed screen to cooking screen.
        _unHighlightMenuTab(); // unhighlight the previous menu tab.
        _updateScreen(Fudz.COOKING_SCREEN);
    }//GEN-LAST:event_cookingPanelMouseClicked

    private void ordersPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersPanelMouseEntered
        if (isResizingWindowOnDrag[0])
            return;
        
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR)); // always set the cursor to default
        
        if (viewedScrn == Fudz.ORDERS_SCREEN)
            return;
        
        ordersPanel.setBackground(Fudz.mouseEnteredOnMenuTabs_COLOR);
    }//GEN-LAST:event_ordersPanelMouseEntered

    private void ordersPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersPanelMouseExited
        if (viewedScrn == Fudz.ORDERS_SCREEN)
            return;
        
        ordersPanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
    }//GEN-LAST:event_ordersPanelMouseExited

    private void ordersPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersPanelMouseClicked
        pHolderCount = 0; // always reset the placeholder count when changing screens
        if (viewedScrn == Fudz.ORDERS_SCREEN)
            return;
        
        ordersPanel.setBackground(Fudz.mouseClickedOnMenuTabs_COLOR);
        viewedScrn = Fudz.ORDERS_SCREEN; // set the viewed screen to orders screen.
        _unHighlightMenuTab(); // unhighlight the previous menu tab.
        _updateScreen(Fudz.ORDERS_SCREEN);
    }//GEN-LAST:event_ordersPanelMouseClicked

    private void ready2ServePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ready2ServePanelMouseEntered
        if (isResizingWindowOnDrag[0])
            return;
        
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR)); // always set the cursor to default
        
        if (viewedScrn == Fudz.RTS_SCREEN)
            return;
        
        ready2ServePanel.setBackground(Fudz.mouseEnteredOnMenuTabs_COLOR);
    }//GEN-LAST:event_ready2ServePanelMouseEntered

    private void ready2ServePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ready2ServePanelMouseExited
        if (viewedScrn == Fudz.RTS_SCREEN)
            return;
        
        ready2ServePanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
    }//GEN-LAST:event_ready2ServePanelMouseExited

    private void ready2ServePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ready2ServePanelMouseClicked
        pHolderCount = 0; // always reset the placeholder count when changing screens
        if (viewedScrn == Fudz.RTS_SCREEN)
            return;
        
        ready2ServePanel.setBackground(Fudz.mouseClickedOnMenuTabs_COLOR);
        viewedScrn = Fudz.RTS_SCREEN; // set the viewed screen to orders screen.
        _unHighlightMenuTab(); // unhighlight the previous menu tab.
        _updateScreen(viewedScrn);
    }//GEN-LAST:event_ready2ServePanelMouseClicked

    /* * * * * * * * *
    * CUSTOM METHODS
    * * * * * * * * */
    // ** Listeners ** \\
    private void _initListeners() {
        // FRAME MOUSE LISTENER
        fudzFrameMouseListener = new FudzMouseListener() {
            @Override
            public void onPressed() {
                JPanel fragment = (JPanel)contentPanel.getComponent(0);
                columnPHolder = Fudz.getColumn(contentsScrollPane.getWidth(), fragment.getPreferredSize().width);
            }

            @Override
            public void onDragged() {
                // ** updates the fragments column every drag ** \\
                JPanel fragment = (JPanel)contentPanel.getComponent(0);
                final int column = Fudz.getColumn(contentsScrollPane.getWidth(), fragment.getPreferredSize().width);
                if (column != columnPHolder) {
                    pHolderCount = 0;
                    _updateScreen(viewedScrn);
                }
                // = = = = = = = = = = = = = = \\
            }
        };
        
        // TOOLBAR MOUSE LISTENER
        fudzToolbarMouseListener = (int frameX, int frameY) -> {
            // onDragged
            WindowFrame.this.setLocation(frameX, frameY);
        };
        
        // set the listeners for the frame
        this.setFudzMouseListener(fudzFrameMouseListener);
        fudzToolbar.setFudzToolbarMouseListener(fudzToolbarMouseListener);
    }
    
    // this will update the screen when a certain menu tab is click.
    private void _updateScreen(final int screen) {
        switch (screen) {
            case Fudz.ORDERS_SCREEN:
                headingLbl.setForeground(new Color(183,138,0));
                headingLbl.setText("Customer Orders");
                // populate the contentPanel with the orders
                contentPanel.populate(screen, contentsScrollPane, mainOrderLst.size());
                contentPanel.notifyItemChanged();// always notify the panel about the changes to avoid distorted or not visible graphics
                break;
            case Fudz.COOKING_SCREEN:
                headingLbl.setText("Preparing Orders");
                // populate the contentPanel with the cooking orders
                contentPanel.populate(screen, contentsScrollPane, cookingOrderLst.size());
                contentPanel.notifyItemChanged(); // always notify the panel about the changes to avoid distorted or not visible graphics
                break;
            case Fudz.RTS_SCREEN:
                headingLbl.setText("Orders Ready");
                // populate the contentPanel with the ready to serve orders
                contentPanel.populate(screen, contentsScrollPane, ready2ServeLst.size());
                contentPanel.notifyItemChanged();// always notify the panel about the changes to avoid distorted or not visible graphics
                break;
        }
    }
    
    // *** This method is just an example, just to populate the list, this will later be removed *** \\
    public void _populate() {
        for (int i=0; i<10; i++) {
            HashMap<String, Object> orders = new HashMap<>();
            List<HashMap<String, Object>> ordersItems = new ArrayList<>();
            {
                HashMap<String, Object> map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Cheese Burger King");
                map.put(FudzJList.ITEM_QTY_KEY, 3);
                ordersItems.add(map);

                map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Spaghetti");
                map.put(FudzJList.ITEM_QTY_KEY, 2);
                ordersItems.add(map);

                map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Mammon");
                map.put(FudzJList.ITEM_QTY_KEY, 5);
                ordersItems.add(map);

                map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Fried Chicken");
                map.put(FudzJList.ITEM_QTY_KEY, 5);
                ordersItems.add(map);
            }

            List<HashMap<String, Object>> addOnsItems = new ArrayList<>();
            {
                HashMap<String, Object> map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Cheese Burger King");
                map.put(FudzJList.ITEM_QTY_KEY, 3);
                addOnsItems.add(map);

                map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Spaghetti");
                map.put(FudzJList.ITEM_QTY_KEY, 2);
                addOnsItems.add(map);

                map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Mammon");
                map.put(FudzJList.ITEM_QTY_KEY, 5);
                addOnsItems.add(map);

                map = new HashMap<>();
                map.put(FudzJList.ITEM_NAME_KEY, "Fried Chicken");
                map.put(FudzJList.ITEM_QTY_KEY, 5);
                addOnsItems.add(map);
            }

            orders.put(Fudz.ORDERS_LIST_KEY, new Gson().toJson(ordersItems));
            orders.put(Fudz.ADDONS_LIST_KEY, new Gson().toJson(addOnsItems));
            orders.put("Bill", new Gson().toJson(0));

            mainOrderLst.add(orders);
        }
    }
    
    // this will unhighlight the previous highlighted menu tab.
    private void _unHighlightMenuTab() {
        switch (viewedScrn) {
            case Fudz.ORDERS_SCREEN:
                cookingPanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
                ready2ServePanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
                
                orders_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/order_yellow_25px.png")));
                cooking_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cooking_white_25px.png")));
                ready_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/waiter_white_25px.png")));
                break;
            case Fudz.COOKING_SCREEN:
                ordersPanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
                ready2ServePanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
                
                orders_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/order_white_25px.png")));
                cooking_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cooking_yellow_25px.png")));
                ready_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/waiter_white_25px.png")));
                break;
            case Fudz.RTS_SCREEN:
                ordersPanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
                cookingPanel.setBackground(Fudz.mouseExitedOnMenuTabs_COLOR);
                
                orders_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/order_white_25px.png")));
                cooking_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cooking_white_25px.png")));
                ready_ic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/waiter_yellow_25px.png")));
                break;
        }
    }
    
    /*
    * This will update the screen or the fragments 
    * layout everytime the window frame state changed
    * - -
    * We update it in the background thread so it can
    * properly update the screen or the fragments layout
    */
    private class UpdateFragmentsThread extends Thread {
        
        private boolean isFirstInit = true;
        
        @Override
        public void run() {
            
            _updateScreen(viewedScrn);
            
            if (isFirstInit) {
                WindowFrame.this.setMinimumSize(new Dimension(menuPanel.getWidth()+18+ordersFragmentPanelWidth+19+20, ordersFragmentPanelHeight+115));
                isFirstInit = false;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WindowFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closeWindowBtn;
    private com.fudz.custom.GridListView contentPanel;
    private javax.swing.JScrollPane contentsScrollPane;
    private javax.swing.JPanel cookingPanel;
    private javax.swing.JLabel cooking_ic;
    private com.fudz.custom.FudzToolbar fudzToolbar;
    private javax.swing.JLabel headingLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel maximizeBtn;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JLabel minimizeBtn;
    private javax.swing.JPanel ordersPanel;
    private javax.swing.JLabel orders_ic;
    private javax.swing.JPanel ready2ServePanel;
    private javax.swing.JLabel ready_ic;
    // End of variables declaration//GEN-END:variables
}
